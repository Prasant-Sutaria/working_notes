--------------------------------------------------------------------------------------------------------
1. Maven Error - project element is not defined.

	Try to force download - maven-4.0.0.xsd.

	Try to enable the Download Artifact Javadoc.

--------------------------------------------------------------------------------------------------------
2. How to take input from commandline?

	try(BufferedReader br = new BufferedReader(new InputStreamReader(System.in))){

		String input = br.readLine();
	} 

--------------------------------------------------------------------------------------------------------
3. Read File?

	File file = new File("File Path");

	StringBuilder fileContent = new StringBuilder();

	try(BufferedReader br = new BufferedReader(new FileReader(file))){

		String currentLine;

		while((currentLine = br.readLine())!=null){
			fileContent.append(currentLine);
		}
	}

--------------------------------------------------------------------------------------------------------
4. Find all the classes in a package using Reflection?

	ImmutableSet<ClassInfo> classInfos = ClassPath.from(ClassLoader.getSystemClassLoader()).getAllClasses();

	Set<String> classInPackage = classInfos.stream()
								.filter(classInfo ->  classInfo.getPackageName(packageName)
								.startsWith())
								.collect(Collectors.toSet());

--------------------------------------------------------------------------------------------------------
5. Find all the methods targeted with an annotation and value in a class?

	Class<?> clazz = Class.forName("Qualified class name");

	Method[] methods = clazz.getDeclaredMethods();

	Set<Method> methodsWithAnnotation = Stream.of(methods)
										.filter(method -> method.getAnnotation(AnnotationType.class)!=null )
										.collect(Collectors.toSet());

--------------------------------------------------------------------------------------------------------
6. Instantiate a Class object using Reflection?

	Class<?> clazz = Class.forName("Qualified class name");

	Constructor<?> constructor = clazz.getConstructor(ParameterType.class);

	Object object = constructor.newInstance(parameterValue);

--------------------------------------------------------------------------------------------------------
7. Invoke a method in a class using Reflection?

	Object result = methodWithAnnotation.invoke(classObject, parameters);

--------------------------------------------------------------------------------------------------------
8. How to parse JSON String?

	import com.fasterxml.jackson.databind.DeserializationFeature;
	import com.fasterxml.jackson.databind.JsonMappingException;
	import com.fasterxml.jackson.databind.ObjectMapper;

	Class<T> classType;

	ObjectMapper objectMapper = new ObjectMapper().configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);

	T jsonObject = objectMapper.readValue(jsonString, classType);

--------------------------------------------------------------------------------------------------------
9. Create custom annotation for a class?

	
	@Retention(RetentionPolicy.RUNTIME)
	@Target(ElementType.TYPE)
	public @interface MyAnnotationForClass{}

--------------------------------------------------------------------------------------------------------
10. Create custom annotation for a method?

	@Retention(RetentionPolicy.RUNTIME)
	@Target(ElementType.METHOD)
	public @interface MyAnnotationForMethod{
		public String[] annotationParams();
	}

--------------------------------------------------------------------------------------------------------
11. Create custom annotation for a Field?

	@Retention(RetentionPolicy.RUNTIME)
	@Target(ElementType.FIELD)
	public @interface MyAnnotationForField{
		public String[] annotationParams();
	}

--------------------------------------------------------------------------------------------------------
12. Double value with 2 decimal precision?

	import java.math.BigDecimal;
	import java.math.RoundingMode;

	BigDecimal bigDecimal = new BigDecimal("12.67890");

	bigDecimal = bigDecimal.setScale(2, RoundingMode.CEILING);

--------------------------------------------------------------------------------------------------------
13. Eclipse CTRL + SPACE command for autocomplete not working on MAC?

	System Preferences -> Keyboard -> Shortcuts -> Input Sources and disable both shortcuts in there. 

--------------------------------------------------------------------------------------------------------
14. Evaluate Java expression on the fly using JEXL (Java Extension Library)?

	import org.apache.commons.jexl3.*;

	Map<String, String> studentMap = new HashMap<String, String>();
		
	studentMap.put("name", "Prasant");
	
	JexlEngine jexlEngine = new JexlBuilder().create();
	
	JexlContext jexlContext = new QAFJexlContext(studentMap);
	
	String booleanExpression = "name==\"Garima\"";
	
	JexlExpression jexlExpression = jexlEngine.createExpression(booleanExpression);
	
	boolean result = (boolean) jexlExpression.evaluate(jexlContext); // false

--------------------------------------------------------------------------------------------------------
15. Publishing jar in Maven Central:

	1. Create account in https://central.sonatype.com

	2. Revoke existing key:
		gpg --output revoke.asc --gen-revoke <key_id>

	3. Create gpg public and private keys for signing the jar file:

		a. gpg --full-generate-key, note the pass-phrase and the key id.
		b. gpg --armor --export <key_id>, copy the public key.

	4. Publish the public key in the following keyserver - https://keys.openpgp.org/, authenticate the via 	
		email.

	5. Export export GPG_TTY=$(tty)

	6. Publish the jar in Maven central - mvn deploy and click publish button.

--------------------------------------------------------------------------------------------------------
16. How to solvejava.lang.ClassNotFoundException: 
				org.asynchttpclient.DefaultAsyncHttpClientConfig$Builder?

	Add the following system property - System.setProperty("webdriver.http.factory", "jdk-http-client");

--------------------------------------------------------------------------------------------------------
17. Inject/Scan Barcode in Android Device?

	a. Install android app which can manage System Clipboard. Example - Clipper.apk https://github.com/majido/clipper

	b. Execute ADB command to set value in the clipboard - 

		driver.execute("mobile: shell", "\"am broadcast -a clipper.set -e text \"<TEXT_TO_SET>\"");

--------------------------------------------------------------------------------------------------------
18. Check all the Java version installed in a machine:

	a. MAC: /usr/libexec/java_home -V
	b. Window: check the java folder inside Program folder.

--------------------------------------------------------------------------------------------------------
19. Switching between multiple versions of JDK in MAC using jenv:

	a. We have JAVA_HOME env variable that helps Java programs to locate the installed JDK.

	b. We also have /usr/libexec/java_home utility which helps on locating JDK installed. 
		For example, to find the installation path of Java 11 execute the following command: /usr/libexec/java_home -v 11

	c. We can combine both the env variable and java_home utility to switch between the installed JDK:

		export JAVA_HOME=`/usr/libexec/java_home -v XX` 			XX stands for the Java version.

	d. Install jenv using brew install jenv

	e. Add the following to .zshrc:

		export PATH="$HOME/.jenv/bin:$PATH"
		eval "$(jenv init -)"
		jenv enable-plugin export

	f. Add java env using following:

		jenv add `/usr/libexec/java_home -v 11`

	g. List all the list on JDK:

		jenv versions

	h. Switch to a JDK version:

		jenv global 21.0.2 				-----> Set Global version of Java
		jenv global --unset				-----> Unset Global version of Java

		jenv local 21.0.2 				-----> Set local version of Java
		jenv local --unset				-----> Set Global version of Java

--------------------------------------------------------------------------------------------------------
20. Reload .zshrc:

	source ~/.zshrc

--------------------------------------------------------------------------------------------------------
21. Generate random value between 1000 and 1999:

	import java.util.Random;
	Random random = new Random();

	int randomNumber = random.nextInt(1999 - 1000 + 1) + 1000;

--------------------------------------------------------------------------------------------------------
22. Convert List<Integer> to int[]:

	int[] example1 = list.stream().mapToInt(i->i).toArray();
	// OR
	int[] example2 = list.stream().mapToInt(Integer::intValue).toArray();

--------------------------------------------------------------------------------------------------------
23. Create a JSON string (convert Map to JSON):

	HashMap<String, String> data = new HashMap<>();

	Using Jackson:

		ObjectMapper objectMapper = new ObjectMapper();
    	String jsonString = objectMapper.writeValueAsString(data);

    Using Gson:

    	Gson gson = new Gson();
	    Type typeObject = new TypeToken<HashMap>() {}.getType();
	    String gsonData = gson.toJson(data, typeObject);

	Using JSON:

		JSONObject jsonObject = new JSONObject(data);
    	String orgJsonData = jsonObject.toString();

--------------------------------------------------------------------------------------------------------
24. Upload a image file Multipart upload:

	[Using apache http client 5]

	// File to Upload
	File fileToUpload = new File(localFilePath);

	RequestConfig requestConfig = RequestConfig.custom().setConnectTimeout(Timeout.ofSeconds(10)).build();

	// Closeable Http client
	try (CloseableHttpClient httpClient = HttpClients.custom().setDefaultRequestConfig(requestConfig).build()) {

		Map<String, Object> requestPartMap = new HashMap<String, Object>();
		requestPartMap.put("paramter", "value");
		
		// Object Mapper converts HashMap into JSON String
		ObjectMapper objectMapper = new ObjectMapper();
		String requestPartStr = objectMapper.writeValueAsString(requestPartMap);

		// Content Body for file
		ContentBody inputStream = new FileBody(fileToUpload, ContentType.APPLICATION_OCTET_STREAM);

		// Content Body for text
		ContentBody requestPart = new StringBody(requestPartStr, ContentType.APPLICATION_JSON);

		// Create a MultipartEntityBuilder
		MultipartEntityBuilder builder = MultipartEntityBuilder.create();

		builder.addPart("file_form_name", inputStream);
		builder.addPart("text_form_name", requestPart);

		// Build the multipart entity
		HttpEntity multipartEntity = builder.build();

		// Create an HttpPost request
		HttpPost httpPost = new HttpPost(uploadAPIURL);
		httpPost.setEntity(multipartEntity);
		httpPost.setHeader("header-name", "header-value");

		// Execute the request
		try (CloseableHttpResponse response = httpClient.execute(httpPost)) {
			
			// Get the response status code
			int statusCode = response.getCode();

			// Get the response body
			HttpEntity responseEntity = response.getEntity();

			String responseString = EntityUtils.toString(responseEntity);
		}
	}

--------------------------------------------------------------------------------------------------------
25. Set up proxy details used by JVM:

	System.setProperty("http.proxyHost", proxyHost);
    System.setProperty("http.proxyPort", proxyPort);
    System.setProperty("https.proxyHost", proxyHost);
    System.setProperty("https.proxyPort", proxyPort);

--------------------------------------------------------------------------------------------------------
    